/*
 * Semantic faceted search
 *
 */

(function() {

    'use strict';

    angular.module('facetApp')

    /*
    * Controller for the results view.
    */
    .controller('VisuController', VisuController);

    /* @ngInject */
    function VisuController($scope, $location, $q, $state, _, norssitService,
            FacetHandler, facetUrlStateHandlerService) {

        var vm = this;
   
        vm.people = []; 
		  vm.removeFacetSelections = removeFacetSelections;

		  google.charts.load('current', {packages: ['corechart', 'line']});
		  
        var initListener = $scope.$on('sf-initial-constraints', function(event, config) {
            updateResults(event, config);
            initListener();
        });
        $scope.$on('sf-facet-constraints', updateResults);

        norssitService.getFacets().then(function(facets) {
            vm.facets = facets;
            vm.facetOptions = getFacetOptions();
            vm.facetOptions.scope = $scope;
            vm.handler = new FacetHandler(vm.facetOptions);
        });

        function removeFacetSelections() {
            $state.reload();
        }

        function getFacetOptions() {
            var options = norssitService.getFacetOptions();
            options.initialState = facetUrlStateHandlerService.getFacetValuesFromUrlParams();
            return options;
        }



        function updateResults(event, facetSelections) {
            if (vm.previousSelections && _.isEqual(facetSelections.constraint,
                    vm.previousSelections)) {
                return;
            }
            vm.previousSelections = _.clone(facetSelections.constraint);
            facetUrlStateHandlerService.updateUrlParams(facetSelections);
            return fetchResults(facetSelections).then(function (people) {
            	// drawBasic(); // console.log(people.length); 
            	google.charts.setOnLoadCallback(drawBasic);
            	return;
	         });
        }

			
			//

			function drawBasic() {

		      var data = new google.visualization.DataTable();
		      data.addColumn('number', 'X');
		      data.addColumn('number', 'People');
				var arr=countByYear(vm.people, 'enrollmentYear');
		      data.addRows(arr);
		
		      var options = {
		        hAxis: {
		          title: 'Enrollment Year'
		        },
		        vAxis: {
		          title: 'People'
		        }
		      };
		
		      var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
		
		      chart.draw(data, options);
		  }
    
    		function countByYear(people, prop) {
    			var res={},
    				 minY=2100, 
    				 maxY=1800;
    				 
				for (var i=0; i<people.length; i++) {
					var y=parseInt(people[i][prop]);
					if (y<minY) minY=y;
					if (y>maxY) maxY=y;
					if (res.hasOwnProperty(y)) {
						res[y]+=1;
					} else {
						res[y]=1;
					}
				}
								
				for (var i=minY; i<=maxY; i++) {
					if (!res.hasOwnProperty(y)) res[i]=0;
				}
				
				var arr=[];
				for (y in res) {
					arr.push([parseInt(y),res[y]]);
				}
				return arr;
    		}
    	
        var latestUpdate;
        function fetchResults(facetSelections) {
            vm.isLoadingResults = true;
            vm.people = [];
            vm.error = undefined;

            var updateId = _.uniqueId();
            latestUpdate = updateId;

            return norssitService.getResults(facetSelections)
            .then(function(pager) {
            	return pager.getTotalCount().then(function (count) { 
            		if (count>1000) {
            			return $q.reject('Too many results.');
            		}
            		return pager;
            	})  
            })
            .then(function(pager) {
                return pager.getAllSequentially(5000);
            }).then(function(res) {
                if (latestUpdate !== updateId) {
                    return;
                }
               
                vm.isLoadingResults = false;
                vm.people = res;
                return res;
            }).catch(handleError);
        }

        function handleError(error) {
            vm.isLoadingResults = false;
            vm.error = error;
        }
    }
})();
